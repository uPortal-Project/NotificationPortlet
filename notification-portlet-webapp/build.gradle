buildscript {
    ext {
        springBootVersion = '2.7.18'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'com.github.node-gradle.node' version '7.1.0'
    id 'war'
    id 'eclipse-wtp'
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

repositories {
    mavenCentral()
    maven {
        url "https://repository.apache.org/content/repositories/releases/"
    }
    maven {
        url "https://repo.spring.io/release"
    }
}



dependencies {

    /*
     * Notification API
     */
    implementation project(':notification-portlet-api')

    /*
     * Standard Dependencies
     */
    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "com.jayway.jsonpath:json-path:${jsonPathVersion}"
    implementation "net.minidev:json-smart:${jsonSmartVersion}"
    implementation "commons-codec:commons-codec:${commonsCodecVersion}"
    implementation "commons-dbcp:commons-dbcp:${commonsDbcpVersion}"
//    implementation "io.springfox:springfox-swagger2:${springfoxVersion}"
//    implementation "io.springfox:springfox-swagger-ui:${springfoxVersion}"
    implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'
    implementation "javax.servlet:jstl:${jstlVersion}"
    implementation "joda-time:joda-time:${jodaTimeVersion}"
    implementation "net.sf.dozer:dozer:${dozerVersion}"
    implementation "net.sf.dozer:dozer-spring:${dozerVersion}"
    implementation("org.ehcache:ehcache:${ehcacheVersion}")
    implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
    implementation "org.apache.httpcomponents:httpclient:${httpcomponentsVersion}"
    implementation "org.aspectj:aspectjweaver:${aspectjVersion}"
    implementation "org.codehaus.janino:janino:${janinoVersion}"
    implementation "org.hibernate:hibernate-core:${hibernateVersion}"
    implementation("org.hibernate:hibernate-ehcache:${hibernateVersion}") {
        exclude group: 'net.sf.ehcache', module: 'ehcache-core'
    }
    implementation "org.hibernate:hibernate-entitymanager:${hibernateVersion}"
    implementation "org.jasig.resourceserver:resource-server-utils:${resourceServerVersion}"
    implementation("org.jasig.portal:uPortal-soffit-renderer:${uPortalVersion}")
    implementation "org.jasig.portal:uPortal-spring:${uPortalVersion}@jar" // Use @jar classifier to exclude transitive dependencies
    implementation "org.jasypt:jasypt-spring31:${jasyptVersion}"
    implementation "org.springframework:spring-jdbc:${springVersion}"
    implementation "org.springframework:spring-orm:${springVersion}"
    implementation "org.springframework:spring-tx:${springVersion}"
    implementation 'org.springframework:spring-webmvc-portlet:4.3.30.RELEASE'
    implementation 'javax.portlet:portlet-api:2.0'
    implementation 'org.apache.portals.pluto:pluto-taglib:3.1.0'
    implementation 'org.apache.portals.pluto:pluto-container:3.1.0'
    implementation 'org.apache.portals.pluto:pluto-portal-driver-impl:3.1.0'
    implementation "org.springframework.security.oauth:spring-security-oauth2:${springSecurityOAuth2Version}"
    implementation "com.rometools:rome:${romeVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation "javax.annotation:javax.annotation-api:${annotationApiVersion}"
    implementation "javax.xml.bind:jaxb-api:${jaxbApiVersion}"

    /*
     * Spring Boot
     */
    implementation('org.springframework.boot:spring-boot-starter-cache')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-web')
    compileOnly('org.springframework.boot:spring-boot-starter-tomcat')
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    /*
     * Portlet API
     *
     * Needs to be present (and unused) when the project is run independantly;  needs to be absent
     * (but used) when the project is run inside Tomcat.
     */
    compileOnly "${portletApiDependency}"
    compileOnly "${portletApiDependency}"

    /*
     * JDBC Driver JAR(s)
     *
     * These tend to be adopter-specific.  Use an overlay process (e.g. uPortal-start) to include
     * these with your project.  Nevertheless, we will provide the current uPortal HSQLDB driver to
     * the embedded Tomcat (Spring Boot) for when the project is started with bootRun.
     */
    providedRuntime "org.hsqldb:hsqldb:${hsqldbVersion}"

}

node {
    version = nodejsVersion
    download = true
}

/*
 * This task produces a .jar archive from this module, which is in addition to the primary .war
 * archive.  Adopters who with to extend the project may need this additional archive.
 */
tasks.register('classesJar', Jar) {
    from sourceSets.main.output
    archiveClassifier = 'jar'
}
artifacts {
  archives classesJar
}

bootWar {
    enabled = false
}

war {
    archiveClassifier = null
    enabled = true
    from("${buildDir}/css") {
        into('css')
    }
    from("${buildDir}/scripts") {
        into('scripts')
    }
}

tasks.register('createCssAndJsOutputDirs') {
    dependsOn 'npm_ci'
    doLast {
        mkdir "${buildDir}/css"
        mkdir "${buildDir}/scripts"
    }
}

// Handle CSS
project.tasks.getByName('npm_run_compile-less').dependsOn createCssAndJsOutputDirs
project.tasks.getByName('npm_run_minify-css').dependsOn 'npm_run_compile-less'
war.dependsOn 'npm_run_minify-css'

// Handle JS
project.tasks.getByName('npm_run_compile-js').dependsOn createCssAndJsOutputDirs
war.dependsOn 'npm_run_minify-js'

publishing {
    publications {
        web(MavenPublication) {
            from components.web

            pom {
                name = 'notification-portlet-webapp'
                packaging = 'war'
                description = 'SR-286 (Portlet 2.0) portlet to display important notices from campus systems'
                url = 'https://github.com/Jasig/NotificationPortlet'

                scm {
                    connection = 'scm:git@github.com:Jasig/NotificationPortlet.git'
                    url = 'https://github.com/Jasig/NotificationPortlet'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        organization = 'uPortal Developers'
                        organizationUrl = 'https://github.com/Jasig/uPortal/graphs/contributors'
                    }
                }
            }
        }
    }
}
